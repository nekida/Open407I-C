
build/debug/Overlay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800085c  0800085c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800085c  0800085c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800085c  0800085c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800085c  0800085c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800085c  0800085c  0000185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000860  08000860  00001860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000864  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .comment      00000039  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000452a  00000000  00000000  0000206d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001056  00000000  00000000  00006597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000012d1  00000000  00000000  000075ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000238  00000000  00000000  000088c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000278  00000000  00000000  00008af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002a5d  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000013c4  00000000  00000000  0000b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000410  00000000  00000000  0000cb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0000cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000844 	.word	0x08000844

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000844 	.word	0x08000844

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ca:	b08b      	sub	sp, #44	@ 0x2c

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001cc:	ad04      	add	r5, sp, #16
 80001ce:	2400      	movs	r4, #0
 80001d0:	9404      	str	r4, [sp, #16]
 80001d2:	9405      	str	r4, [sp, #20]
 80001d4:	9406      	str	r4, [sp, #24]
 80001d6:	9407      	str	r4, [sp, #28]
 80001d8:	9408      	str	r4, [sp, #32]
 80001da:	9409      	str	r4, [sp, #36]	@ 0x24
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001dc:	4b1b      	ldr	r3, [pc, #108]	@ (800024c <MX_GPIO_Init+0x84>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80001e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001e8:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80001ec:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80001ee:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80001f6:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001fa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80001fe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000200:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000204:	f042 0201 	orr.w	r2, r2, #1
 8000208:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000212:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000214:	480e      	ldr	r0, [pc, #56]	@ (8000250 <MX_GPIO_Init+0x88>)
 8000216:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 800021a:	6183      	str	r3, [r0, #24]
 800021c:	4e0d      	ldr	r6, [pc, #52]	@ (8000254 <MX_GPIO_Init+0x8c>)
 800021e:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000222:	61b3      	str	r3, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOH, USERLED1_Pin|USERLED2_Pin);

  /**/
  GPIO_InitStruct.Pin = USERLED3_Pin|USERLED4_Pin;
 8000224:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000228:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800022a:	2701      	movs	r7, #1
 800022c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800022e:	4629      	mov	r1, r5
 8000230:	f000 f9f8 	bl	8000624 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USERLED1_Pin|USERLED2_Pin;
 8000234:	230c      	movs	r3, #12
 8000236:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000238:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800023a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800023c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800023e:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000240:	4629      	mov	r1, r5
 8000242:	4630      	mov	r0, r6
 8000244:	f000 f9ee 	bl	8000624 <LL_GPIO_Init>

}
 8000248:	b00b      	add	sp, #44	@ 0x2c
 800024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	40022000 	.word	0x40022000
 8000254:	40021c00 	.word	0x40021c00

08000258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000258:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800025a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c0 0c07 	rsb	ip, r0, #7
 8000262:	f1bc 0f04 	cmp.w	ip, #4
 8000266:	bf28      	it	cs
 8000268:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026c:	1d03      	adds	r3, r0, #4
 800026e:	2b06      	cmp	r3, #6
 8000270:	d90f      	bls.n	8000292 <NVIC_EncodePriority+0x3a>
 8000272:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000278:	fa0e f00c 	lsl.w	r0, lr, ip
 800027c:	ea21 0100 	bic.w	r1, r1, r0
 8000280:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa0e fe03 	lsl.w	lr, lr, r3
 8000286:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800028a:	ea41 0002 	orr.w	r0, r1, r2
 800028e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2300      	movs	r3, #0
 8000294:	e7ee      	b.n	8000274 <NVIC_EncodePriority+0x1c>
	...

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800029a:	4a2d      	ldr	r2, [pc, #180]	@ (8000350 <SystemClock_Config+0xb8>)
 800029c:	6813      	ldr	r3, [r2, #0]
 800029e:	f023 0307 	bic.w	r3, r3, #7
 80002a2:	f043 0305 	orr.w	r3, r3, #5
 80002a6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80002a8:	4b29      	ldr	r3, [pc, #164]	@ (8000350 <SystemClock_Config+0xb8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d1f9      	bne.n	80002a8 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80002b4:	4a27      	ldr	r2, [pc, #156]	@ (8000354 <SystemClock_Config+0xbc>)
 80002b6:	6813      	ldr	r3, [r2, #0]
 80002b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002bc:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80002be:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80002c2:	6813      	ldr	r3, [r2, #0]
 80002c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002c8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80002ca:	4b23      	ldr	r3, [pc, #140]	@ (8000358 <SystemClock_Config+0xc0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80002ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80002d2:	d0fa      	beq.n	80002ca <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <SystemClock_Config+0xc0>)
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	4920      	ldr	r1, [pc, #128]	@ (800035c <SystemClock_Config+0xc4>)
 80002da:	4011      	ands	r1, r2
 80002dc:	4a20      	ldr	r2, [pc, #128]	@ (8000360 <SystemClock_Config+0xc8>)
 80002de:	430a      	orrs	r2, r1
 80002e0:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80002e8:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80002f0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <SystemClock_Config+0xc0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80002f6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80002fa:	d0fa      	beq.n	80002f2 <SystemClock_Config+0x5a>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80002fc:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <SystemClock_Config+0xbc>)
 80002fe:	685b      	ldr	r3, [r3, #4]
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000300:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000304:	d0fa      	beq.n	80002fc <SystemClock_Config+0x64>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000306:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <SystemClock_Config+0xc0>)
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800030e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8000316:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 800031a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000326:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	f022 0203 	bic.w	r2, r2, #3
 800032e:	f042 0202 	orr.w	r2, r2, #2
 8000332:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <SystemClock_Config+0xc0>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800033c:	2b08      	cmp	r3, #8
 800033e:	d1f9      	bne.n	8000334 <SystemClock_Config+0x9c>
  {

  }
  LL_Init1msTick(168000000);
 8000340:	4c08      	ldr	r4, [pc, #32]	@ (8000364 <SystemClock_Config+0xcc>)
 8000342:	4620      	mov	r0, r4
 8000344:	f000 f9f2 	bl	800072c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000348:	4620      	mov	r0, r4
 800034a:	f000 fa15 	bl	8000778 <LL_SetSystemCoreClock>
}
 800034e:	bd10      	pop	{r4, pc}
 8000350:	40023c00 	.word	0x40023c00
 8000354:	40007000 	.word	0x40007000
 8000358:	40023800 	.word	0x40023800
 800035c:	ffbf8000 	.word	0xffbf8000
 8000360:	00402a04 	.word	0x00402a04
 8000364:	0a037a00 	.word	0x0a037a00

08000368 <main>:
{
 8000368:	b500      	push	{lr}
 800036a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800036c:	4b32      	ldr	r3, [pc, #200]	@ (8000438 <main+0xd0>)
 800036e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000374:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000376:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000378:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800037c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800037e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000382:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000386:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800038a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800038e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000390:	9b00      	ldr	r3, [sp, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000392:	4c2a      	ldr	r4, [pc, #168]	@ (800043c <main+0xd4>)
 8000394:	68e2      	ldr	r2, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000396:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800039a:	0412      	lsls	r2, r2, #16
 800039c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800039e:	4b28      	ldr	r3, [pc, #160]	@ (8000440 <main+0xd8>)
 80003a0:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80003a2:	60e3      	str	r3, [r4, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a4:	68e0      	ldr	r0, [r4, #12]
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80003a6:	2200      	movs	r2, #0
 80003a8:	210f      	movs	r1, #15
 80003aa:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80003ae:	f7ff ff53 	bl	8000258 <NVIC_EncodePriority>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	0103      	lsls	r3, r0, #4
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
  SystemClock_Config();
 80003ba:	f7ff ff6d 	bl	8000298 <SystemClock_Config>
  MX_GPIO_Init();
 80003be:	f7ff ff03 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003c2:	f000 f841 	bl	8000448 <MX_SPI1_Init>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003c6:	4c1f      	ldr	r4, [pc, #124]	@ (8000444 <main+0xdc>)
 80003c8:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80003ca:	041a      	lsls	r2, r3, #16
 80003cc:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80003d0:	43db      	mvns	r3, r3
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	4313      	orrs	r3, r2
 80003d8:	61a3      	str	r3, [r4, #24]
    LL_mDelay (300);
 80003da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003de:	f000 f9b5 	bl	800074c <LL_mDelay>
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003e2:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80003e4:	041a      	lsls	r2, r3, #16
 80003e6:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80003ea:	43db      	mvns	r3, r3
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	4313      	orrs	r3, r2
 80003f2:	61a3      	str	r3, [r4, #24]
    LL_mDelay (300);
 80003f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003f8:	f000 f9a8 	bl	800074c <LL_mDelay>
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003fc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000400:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000402:	041a      	lsls	r2, r3, #16
 8000404:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8000408:	43db      	mvns	r3, r3
 800040a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800040e:	4313      	orrs	r3, r2
 8000410:	61a3      	str	r3, [r4, #24]
    LL_mDelay (300);
 8000412:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000416:	f000 f999 	bl	800074c <LL_mDelay>
  uint32_t odr = READ_REG(GPIOx->ODR);
 800041a:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800041c:	041a      	lsls	r2, r3, #16
 800041e:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8000422:	43db      	mvns	r3, r3
 8000424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000428:	4313      	orrs	r3, r2
 800042a:	61a3      	str	r3, [r4, #24]
    LL_mDelay (300);
 800042c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000430:	f000 f98c 	bl	800074c <LL_mDelay>
  while (1)
 8000434:	e7c7      	b.n	80003c6 <main+0x5e>
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800
 800043c:	e000ed00 	.word	0xe000ed00
 8000440:	05fa0300 	.word	0x05fa0300
 8000444:	40021c00 	.word	0x40021c00

08000448 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800044c:	ad08      	add	r5, sp, #32
 800044e:	2228      	movs	r2, #40	@ 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4628      	mov	r0, r5
 8000454:	f000 f9c9 	bl	80007ea <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	a902      	add	r1, sp, #8
 800045a:	2400      	movs	r4, #0
 800045c:	9402      	str	r4, [sp, #8]
 800045e:	604c      	str	r4, [r1, #4]
 8000460:	608c      	str	r4, [r1, #8]
 8000462:	60cc      	str	r4, [r1, #12]
 8000464:	610c      	str	r4, [r1, #16]
 8000466:	614c      	str	r4, [r1, #20]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000468:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <MX_SPI1_Init+0x90>)
 800046a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800046c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000470:	645a      	str	r2, [r3, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000474:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000478:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800047a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800047c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047e:	f042 0201 	orr.w	r2, r2, #1
 8000482:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800048c:	9b00      	ldr	r3, [sp, #0]
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800048e:	23f0      	movs	r3, #240	@ 0xf0
 8000490:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000492:	2302      	movs	r3, #2
 8000494:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000496:	2303      	movs	r3, #3
 8000498:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800049a:	2305      	movs	r3, #5
 800049c:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	480f      	ldr	r0, [pc, #60]	@ (80004dc <MX_SPI1_Init+0x94>)
 80004a0:	f000 f8c0 	bl	8000624 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80004a4:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80004a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80004aa:	9309      	str	r3, [sp, #36]	@ 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80004ac:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80004ae:	940b      	str	r4, [sp, #44]	@ 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80004b0:	940c      	str	r4, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 80004b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80004b6:	930d      	str	r3, [sp, #52]	@ 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80004b8:	940e      	str	r4, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80004ba:	940f      	str	r4, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80004bc:	9410      	str	r4, [sp, #64]	@ 0x40
  SPI_InitStruct.CRCPoly = 10;
 80004be:	230a      	movs	r3, #10
 80004c0:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80004c2:	4c07      	ldr	r4, [pc, #28]	@ (80004e0 <MX_SPI1_Init+0x98>)
 80004c4:	4629      	mov	r1, r5
 80004c6:	4620      	mov	r0, r4
 80004c8:	f000 f8f5 	bl	80006b6 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80004cc:	6863      	ldr	r3, [r4, #4]
 80004ce:	f023 0310 	bic.w	r3, r3, #16
 80004d2:	6063      	str	r3, [r4, #4]
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d4:	b013      	add	sp, #76	@ 0x4c
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020000 	.word	0x40020000
 80004e0:	40013000 	.word	0x40013000

080004e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler>

080004e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <HardFault_Handler>

080004e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler>

080004ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler>

080004ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler>

080004ee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f2:	4770      	bx	lr

080004f4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	4770      	bx	lr

080004f6 <LL_GPIO_SetPinSpeed>:
{
 80004f6:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80004f8:	6884      	ldr	r4, [r0, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fa:	fa91 f3a1 	rbit	r3, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80004fe:	b1a3      	cbz	r3, 800052a <LL_GPIO_SetPinSpeed+0x34>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000500:	fab3 f383 	clz	r3, r3
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	f04f 0c03 	mov.w	ip, #3
 800050a:	fa0c f303 	lsl.w	r3, ip, r3
 800050e:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000512:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000516:	b151      	cbz	r1, 800052e <LL_GPIO_SetPinSpeed+0x38>
  return __builtin_clz(value);
 8000518:	fab1 f181 	clz	r1, r1
 800051c:	0049      	lsls	r1, r1, #1
 800051e:	408a      	lsls	r2, r1
 8000520:	4313      	orrs	r3, r2
 8000522:	6083      	str	r3, [r0, #8]
}
 8000524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000528:	4770      	bx	lr
    return 32U;
 800052a:	2320      	movs	r3, #32
 800052c:	e7ea      	b.n	8000504 <LL_GPIO_SetPinSpeed+0xe>
 800052e:	2120      	movs	r1, #32
 8000530:	e7f4      	b.n	800051c <LL_GPIO_SetPinSpeed+0x26>

08000532 <LL_GPIO_SetPinPull>:
{
 8000532:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000534:	68c4      	ldr	r4, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000536:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800053a:	b1a3      	cbz	r3, 8000566 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 800053c:	fab3 f383 	clz	r3, r3
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	f04f 0c03 	mov.w	ip, #3
 8000546:	fa0c f303 	lsl.w	r3, ip, r3
 800054a:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054e:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000552:	b151      	cbz	r1, 800056a <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 8000554:	fab1 f181 	clz	r1, r1
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	4313      	orrs	r3, r2
 800055e:	60c3      	str	r3, [r0, #12]
}
 8000560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000564:	4770      	bx	lr
    return 32U;
 8000566:	2320      	movs	r3, #32
 8000568:	e7ea      	b.n	8000540 <LL_GPIO_SetPinPull+0xe>
 800056a:	2120      	movs	r1, #32
 800056c:	e7f4      	b.n	8000558 <LL_GPIO_SetPinPull+0x26>

0800056e <LL_GPIO_SetAFPin_0_7>:
{
 800056e:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000570:	6a04      	ldr	r4, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000572:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 8000576:	b1a3      	cbz	r3, 80005a2 <LL_GPIO_SetAFPin_0_7+0x34>
  return __builtin_clz(value);
 8000578:	fab3 f383 	clz	r3, r3
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	f04f 0c0f 	mov.w	ip, #15
 8000582:	fa0c f303 	lsl.w	r3, ip, r3
 8000586:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800058a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800058e:	b151      	cbz	r1, 80005a6 <LL_GPIO_SetAFPin_0_7+0x38>
  return __builtin_clz(value);
 8000590:	fab1 f181 	clz	r1, r1
 8000594:	0089      	lsls	r1, r1, #2
 8000596:	408a      	lsls	r2, r1
 8000598:	4313      	orrs	r3, r2
 800059a:	6203      	str	r3, [r0, #32]
}
 800059c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005a0:	4770      	bx	lr
    return 32U;
 80005a2:	2320      	movs	r3, #32
 80005a4:	e7ea      	b.n	800057c <LL_GPIO_SetAFPin_0_7+0xe>
 80005a6:	2120      	movs	r1, #32
 80005a8:	e7f4      	b.n	8000594 <LL_GPIO_SetAFPin_0_7+0x26>

080005aa <LL_GPIO_SetAFPin_8_15>:
{
 80005aa:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80005ac:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80005ae:	0a09      	lsrs	r1, r1, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b0:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80005b4:	b1a3      	cbz	r3, 80005e0 <LL_GPIO_SetAFPin_8_15+0x36>
  return __builtin_clz(value);
 80005b6:	fab3 f383 	clz	r3, r3
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	f04f 0c0f 	mov.w	ip, #15
 80005c0:	fa0c f303 	lsl.w	r3, ip, r3
 80005c4:	ea24 0403 	bic.w	r4, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c8:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80005cc:	b151      	cbz	r1, 80005e4 <LL_GPIO_SetAFPin_8_15+0x3a>
  return __builtin_clz(value);
 80005ce:	fab1 f181 	clz	r1, r1
 80005d2:	0089      	lsls	r1, r1, #2
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4314      	orrs	r4, r2
 80005d8:	6244      	str	r4, [r0, #36]	@ 0x24
}
 80005da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005de:	4770      	bx	lr
    return 32U;
 80005e0:	2320      	movs	r3, #32
 80005e2:	e7ea      	b.n	80005ba <LL_GPIO_SetAFPin_8_15+0x10>
 80005e4:	2120      	movs	r1, #32
 80005e6:	e7f4      	b.n	80005d2 <LL_GPIO_SetAFPin_8_15+0x28>

080005e8 <LL_GPIO_SetPinMode>:
{
 80005e8:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005ea:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ec:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80005f0:	b1a3      	cbz	r3, 800061c <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 80005f2:	fab3 f383 	clz	r3, r3
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	f04f 0c03 	mov.w	ip, #3
 80005fc:	fa0c f303 	lsl.w	r3, ip, r3
 8000600:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000604:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000608:	b151      	cbz	r1, 8000620 <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 800060a:	fab1 f181 	clz	r1, r1
 800060e:	0049      	lsls	r1, r1, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4313      	orrs	r3, r2
 8000614:	6003      	str	r3, [r0, #0]
}
 8000616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800061a:	4770      	bx	lr
    return 32U;
 800061c:	2320      	movs	r3, #32
 800061e:	e7ea      	b.n	80005f6 <LL_GPIO_SetPinMode+0xe>
 8000620:	2120      	movs	r1, #32
 8000622:	e7f4      	b.n	800060e <LL_GPIO_SetPinMode+0x26>

08000624 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	4607      	mov	r7, r0
 8000628:	460e      	mov	r6, r1
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800062a:	680d      	ldr	r5, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062c:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8000630:	b115      	cbz	r5, 8000638 <LL_GPIO_Init+0x14>
  return __builtin_clz(value);
 8000632:	fab5 f585 	clz	r5, r5
 8000636:	e01a      	b.n	800066e <LL_GPIO_Init+0x4a>
    return 32U;
 8000638:	2520      	movs	r5, #32
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800063a:	e018      	b.n	800066e <LL_GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800063c:	68b2      	ldr	r2, [r6, #8]
 800063e:	4621      	mov	r1, r4
 8000640:	4638      	mov	r0, r7
 8000642:	f7ff ff58 	bl	80004f6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000646:	68f2      	ldr	r2, [r6, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	ea23 0304 	bic.w	r3, r3, r4
 800064e:	fb04 f202 	mul.w	r2, r4, r2
 8000652:	4313      	orrs	r3, r2
 8000654:	607b      	str	r3, [r7, #4]
}
 8000656:	e016      	b.n	8000686 <LL_GPIO_Init+0x62>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000658:	6972      	ldr	r2, [r6, #20]
 800065a:	4621      	mov	r1, r4
 800065c:	4638      	mov	r0, r7
 800065e:	f7ff ffa4 	bl	80005aa <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000662:	6872      	ldr	r2, [r6, #4]
 8000664:	4621      	mov	r1, r4
 8000666:	4638      	mov	r0, r7
 8000668:	f7ff ffbe 	bl	80005e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800066c:	3501      	adds	r5, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800066e:	6834      	ldr	r4, [r6, #0]
 8000670:	fa34 f205 	lsrs.w	r2, r4, r5
 8000674:	d01d      	beq.n	80006b2 <LL_GPIO_Init+0x8e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000676:	2201      	movs	r2, #1
 8000678:	40aa      	lsls	r2, r5
    if (currentpin)
 800067a:	4014      	ands	r4, r2
 800067c:	d0f6      	beq.n	800066c <LL_GPIO_Init+0x48>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800067e:	6873      	ldr	r3, [r6, #4]
 8000680:	3b01      	subs	r3, #1
 8000682:	2b01      	cmp	r3, #1
 8000684:	d9da      	bls.n	800063c <LL_GPIO_Init+0x18>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000686:	6932      	ldr	r2, [r6, #16]
 8000688:	4621      	mov	r1, r4
 800068a:	4638      	mov	r0, r7
 800068c:	f7ff ff51 	bl	8000532 <LL_GPIO_SetPinPull>
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000690:	6873      	ldr	r3, [r6, #4]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d1e5      	bne.n	8000662 <LL_GPIO_Init+0x3e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0dc      	beq.n	8000658 <LL_GPIO_Init+0x34>
  return __builtin_clz(value);
 800069e:	fab3 f383 	clz	r3, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d8d8      	bhi.n	8000658 <LL_GPIO_Init+0x34>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80006a6:	6972      	ldr	r2, [r6, #20]
 80006a8:	4621      	mov	r1, r4
 80006aa:	4638      	mov	r0, r7
 80006ac:	f7ff ff5f 	bl	800056e <LL_GPIO_SetAFPin_0_7>
 80006b0:	e7d7      	b.n	8000662 <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 80006b2:	2000      	movs	r0, #0
 80006b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080006b6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80006b6:	4602      	mov	r2, r0
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80006be:	d12e      	bne.n	800071e <LL_SPI_Init+0x68>
 80006c0:	b410      	push	{r4}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80006c2:	6800      	ldr	r0, [r0, #0]
 80006c4:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80006c8:	f020 00bf 	bic.w	r0, r0, #191	@ 0xbf
 80006cc:	680b      	ldr	r3, [r1, #0]
 80006ce:	684c      	ldr	r4, [r1, #4]
 80006d0:	4323      	orrs	r3, r4
 80006d2:	688c      	ldr	r4, [r1, #8]
 80006d4:	4323      	orrs	r3, r4
 80006d6:	68cc      	ldr	r4, [r1, #12]
 80006d8:	4323      	orrs	r3, r4
 80006da:	690c      	ldr	r4, [r1, #16]
 80006dc:	4323      	orrs	r3, r4
 80006de:	694c      	ldr	r4, [r1, #20]
 80006e0:	4323      	orrs	r3, r4
 80006e2:	698c      	ldr	r4, [r1, #24]
 80006e4:	4323      	orrs	r3, r4
 80006e6:	69cc      	ldr	r4, [r1, #28]
 80006e8:	4323      	orrs	r3, r4
 80006ea:	6a0c      	ldr	r4, [r1, #32]
 80006ec:	4323      	orrs	r3, r4
 80006ee:	4318      	orrs	r0, r3
 80006f0:	6010      	str	r0, [r2, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80006f2:	6853      	ldr	r3, [r2, #4]
 80006f4:	f023 0304 	bic.w	r3, r3, #4
 80006f8:	8ac8      	ldrh	r0, [r1, #22]
 80006fa:	4303      	orrs	r3, r0
 80006fc:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80006fe:	6a0b      	ldr	r3, [r1, #32]
 8000700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000704:	d007      	beq.n	8000716 <LL_SPI_Init+0x60>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8000706:	2000      	movs	r0, #0
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000708:	69d3      	ldr	r3, [r2, #28]
 800070a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800070e:	61d3      	str	r3, [r2, #28]
  return status;
}
 8000710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000714:	4770      	bx	lr
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000716:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 8000718:	6113      	str	r3, [r2, #16]
    status = SUCCESS;
 800071a:	2000      	movs	r0, #0
}
 800071c:	e7f4      	b.n	8000708 <LL_SPI_Init+0x52>
  ErrorStatus status = ERROR;
 800071e:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000720:	69d3      	ldr	r3, [r2, #28]
 8000722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000726:	61d3      	str	r3, [r2, #28]
}
 8000728:	4770      	bx	lr
	...

0800072c <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <LL_Init1msTick+0x1c>)
 800072e:	fba3 2300 	umull	r2, r3, r3, r0
 8000732:	099b      	lsrs	r3, r3, #6
 8000734:	3b01      	subs	r3, #1
 8000736:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800073a:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800073c:	2300      	movs	r3, #0
 800073e:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000740:	2305      	movs	r3, #5
 8000742:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	10624dd3 	.word	0x10624dd3

0800074c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800074c:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800074e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000756:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000758:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800075c:	d000      	beq.n	8000760 <LL_mDelay+0x14>
  {
    Delay++;
 800075e:	3001      	adds	r0, #1
  }

  while (Delay)
 8000760:	b138      	cbz	r0, 8000772 <LL_mDelay+0x26>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000762:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800076c:	d0f8      	beq.n	8000760 <LL_mDelay+0x14>
    {
      Delay--;
 800076e:	3801      	subs	r0, #1
 8000770:	e7f6      	b.n	8000760 <LL_mDelay+0x14>
    }
  }
}
 8000772:	b002      	add	sp, #8
 8000774:	4770      	bx	lr
	...

08000778 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000778:	4b01      	ldr	r3, [pc, #4]	@ (8000780 <LL_SetSystemCoreClock+0x8>)
 800077a:	6018      	str	r0, [r3, #0]
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4a03      	ldr	r2, [pc, #12]	@ (8000794 <SystemInit+0x10>)
 8000786:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800078a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800079c:	f7ff fff2 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	@ (80007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	@ (80007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f000 f819 	bl	80007fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ca:	f7ff fdcd 	bl	8000368 <main>
  bx  lr    
 80007ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007dc:	08000864 	.word	0x08000864
  ldr r2, =_sbss
 80007e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007e4:	20000020 	.word	0x20000020

080007e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>

080007ea <memset>:
 80007ea:	4402      	add	r2, r0
 80007ec:	4603      	mov	r3, r0
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d100      	bne.n	80007f4 <memset+0xa>
 80007f2:	4770      	bx	lr
 80007f4:	f803 1b01 	strb.w	r1, [r3], #1
 80007f8:	e7f9      	b.n	80007ee <memset+0x4>
	...

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <__libc_init_array+0x38>)
 8000800:	4d0d      	ldr	r5, [pc, #52]	@ (8000838 <__libc_init_array+0x3c>)
 8000802:	1b5b      	subs	r3, r3, r5
 8000804:	109c      	asrs	r4, r3, #2
 8000806:	2600      	movs	r6, #0
 8000808:	42a6      	cmp	r6, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	f000 f81a 	bl	8000844 <_init>
 8000810:	4d0a      	ldr	r5, [pc, #40]	@ (800083c <__libc_init_array+0x40>)
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <__libc_init_array+0x44>)
 8000814:	1b5b      	subs	r3, r3, r5
 8000816:	109c      	asrs	r4, r3, #2
 8000818:	2600      	movs	r6, #0
 800081a:	42a6      	cmp	r6, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f855 3b04 	ldr.w	r3, [r5], #4
 8000824:	4798      	blx	r3
 8000826:	3601      	adds	r6, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	f855 3b04 	ldr.w	r3, [r5], #4
 800082e:	4798      	blx	r3
 8000830:	3601      	adds	r6, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	0800085c 	.word	0x0800085c
 8000838:	0800085c 	.word	0x0800085c
 800083c:	0800085c 	.word	0x0800085c
 8000840:	08000860 	.word	0x08000860

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	bf00      	nop
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
